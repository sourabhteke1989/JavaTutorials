What is Hibernate?
- Its ORM (Object Relational Mapping) tool/framework for implementing DAO (Data Access Objects).

History?
- Developed by Gavin King in 2001 to over come EJB2 entity beans features. 
So that its not required to write session beans and entity beans compulsory, 
And also dont required to use Application server for enterprise application development to consume various services provided by application servers.  

Features?
1. Auto DDL (Data Definition Language) - To create database scheme automatically of application.
2. HQL (Hibernate Query Language) - Database independent query language, So that implementation wont be database dependent.
3. Cache support - Two level cache support, 1st level and 2nd level cache.
4. PK (Primary Key) generator - Various types of primary key generation support.
5. Data validations - By using annotation's hibernate provide data validation for working with spring and hibernate.
6. ORM Support - IS-A & HAS-A relationships.(One to One, One to Many, Many to One).
7. OGM (Object Graph Mapping) Support - To support mapping between data in non-relational database's like mongo DB and Hadoop Hbase. How this works?
8. Search - Advanced index base search feature for fast search. What is this?
9. Annotations - 
10. Inbuilt Connection Pools - 

States of Objects in Hibernate - 
1. Transient
2. Persistent
3. Detached

Example's to try: -
1. Simple hibernate example
2. DAO implementation using Hibernate
3. Various mapping and join example's using hibernate (One to One, One to Many, Many to One)


Q&A : -
1. How to use Session's in application's? at thread level? operation level? class level?
2. How to implement DAO design pattern using hibernate?
3. What hbm2ddl.auto property value to use in production? and why?
4. 

Observations :  -
1. CRUD Operations (Session object methods)
	- save() - save method will always insert new entry into table even if we pass same ID detached object. This method also returns primary key.
	- persist() - persist method will throw exception if we try to persist object with same ID present in DB. Don't return anything.
	- saveOrUpdate() - 
			1. IF object have same ID values present in DB - Always fire update query to Update object other properties to database. 
			2. IF object don't have same ID OR ID values not populated - Insert new entry to DB.
			
	- merge() - 
			1. IF object have same ID values present in DB - Fire update query if and only if some column value is not matching with DB value.
			2. IF object dont have same ID or ID values not populated - Insert new entry to DB.
	- update() - 
			1. IF object dont have same ID or ID values not populated - Exception "SlateStateException" - Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
			2. IF object have same ID values present in DB - Always fire update query to Update object other properties to database.
			
	- delete() - Only ID populated in object is required to delete from DB. Exception "SlateStateException" if ID not present in DB. IF ID value not populated then no exception.
	
	- get() - Return the persistent instance of the given entity class with the given identifier, or null if there is no such persistent instance. (If the instance is already associated with the session, return that instance. This method never returns an uninitialized instance.)
	- load() - Load by using ID of table and Class type if object exists in DB. This method might return a proxied instance that is initialized on-demand, when a non-identifier method is accessed. Throw exception "ObjectNotFoundException" when object not found in DB.

2. Primary Key Auto Generator : - 
	1. Assigned(default) - User should assign value to primary key column. 
	2. Increment - Hibernate will create incremental values for primary key column by checking max(id).
	3. Sequence - Hibernate creates one hibernate_sequence table, Every time next value will be fetched from sequence table and inserted.
	4. Identity (MySQL and DB2 support) - DB should handle next values for ID column.
	5. hilo - 
	6. native (Increment, Identity, Sequence) - Any one out of three way hibernate do ID generation. 
	7. foreign - For one to one mapping 
	8. Custom - 
